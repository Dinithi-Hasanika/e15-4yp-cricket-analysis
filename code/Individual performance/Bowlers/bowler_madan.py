# -*- coding: utf-8 -*-
"""bowler_madan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p77mU19ZCInVprXCi4TKBXDRj7L6ew3R

**Bowler Feature Importance with Madan Gopal Equation**
"""

from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

wb = gc.open_by_url('https://docs.google.com/spreadsheets/d/1peLpNFoEu8NHtVPttJXz4-aScixYu5dh_-6gYPOi9rQ/edit?ts=5f7f50be#gid=924430584')

sheet = wb.worksheet('bo_data')

data = sheet.get_all_values()

df = pd.DataFrame(data)
df.columns = df.iloc[0]
df = df.iloc[1:]

df.head()

df.__eq__('').sum()

df.__eq__('-').sum()

df.replace('',np.nan,inplace = True)
df.replace('-',np.nan,inplace = True)

df["Height (cm)"]= df["Height (cm)"].astype(float)
df["Man of the match"]= df["Man of the match"].astype(int)
df["Inns"]= df["Inns"].astype(int)
df["Balls"]= df["Balls"].astype(int)
df["Runs"]= df["Runs"].astype(int)
df["Wkts"]= df["Wkts"].astype(int)
df["BBI-calc"]= df["BBI-calc"].astype(float)
df["Ave"]= df["Ave"].astype(float)
df["Econ"]= df["Econ"].astype(float)
df["SR"]= df["SR"].astype(float)
df["4"]= df["4"].astype(int)
df["5"]= df["5"].astype(int)
df["Bowler Score"]= df["Bowler Score"].astype(float)
df["Hat tricks"]= df["Hat tricks"].astype(int)

df.dtypes

df.mean()

df["Height (cm)"].replace(np.nan,182.780635, inplace=True)

print(df["Bowling Style"].value_counts())

df["Bowling Style"].replace(np.nan,"Right-arm fast-medium", inplace=True)

from sklearn.preprocessing import LabelEncoder
#Since python machine learning algorithm do not accept string values
le = LabelEncoder()
df['Bowling Style'] = le.fit_transform(df['Bowling Style'])

df.head()

feature_names = ['Height (cm)','Man of the match','Bowling Style','BBI-calc','SR','4','Hat tricks']
X = df[feature_names]
Y = df['Bowler Score']

#split the data set as training set and test set randomly
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=0)

#apply scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""**Linear Regression Feature importance**"""

from sklearn.linear_model import LinearRegression
from matplotlib import pyplot

linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)

lin_importance = linear_reg.coef_
for i,v in enumerate(lin_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(lin_importance))], lin_importance)
pyplot.show()

print('Accuracy of Linear regressor on training set: {:.2f}'
     .format(linear_reg.score(X_train, y_train)))
print('Accuracy of Linear regressor on test set: {:.2f}'
     .format(linear_reg.score(X_test, y_test)))

"""**CART Regression Feature Importance**"""

from sklearn.tree import DecisionTreeRegressor

d_reg = DecisionTreeRegressor()
d_reg.fit(X_train, y_train)

d_importance = d_reg.feature_importances_
for i,v in enumerate(d_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(d_importance))], d_importance)
pyplot.show()

print('Accuracy of Decision Tree regressor on training set: {:.2f}'
     .format(d_reg.score(X_train, y_train)))
print('Accuracy of Decision Tree regressor on test set: {:.2f}'
     .format(d_reg.score(X_test, y_test)))

"""**Random Forest Regression Feature Importance**"""

from sklearn.ensemble import RandomForestRegressor

rf_reg = RandomForestRegressor()
rf_reg.fit(X_train, y_train)

rf_importance = rf_reg.feature_importances_
for i,v in enumerate(rf_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(rf_importance))], rf_importance)
pyplot.show()

print('Accuracy of Random Forest regressor on training set: {:.2f}'
     .format(rf_reg.score(X_train, y_train)))
print('Accuracy of Random Forest regressor on test set: {:.2f}'
     .format(rf_reg.score(X_test, y_test)))

"""**XGBoost Regression Feature Importance**"""

from xgboost import XGBRegressor

xgb_reg = XGBRegressor()
xgb_reg.fit(X_train, y_train)

xgb_importance = xgb_reg.feature_importances_
for i,v in enumerate(xgb_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(xgb_importance))], xgb_importance)
pyplot.show()

print('Accuracy of Xgboost regressor on training set: {:.2f}'
     .format(xgb_reg.score(X_train, y_train)))
print('Accuracy of Xgboost regressor on test set: {:.2f}'
     .format(xgb_reg.score(X_test, y_test)))

"""**Permutation Feature Importance for Regression**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.inspection import permutation_importance

knn_reg = KNeighborsRegressor()
knn_reg.fit(X_train, y_train)

results = permutation_importance(knn_reg, X_train, y_train, scoring='neg_mean_squared_error')
knn_importance = results.importances_mean

for i,v in enumerate(knn_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(knn_importance))], knn_importance)
pyplot.show()

print('Accuracy of KNN regressor on training set: {:.2f}'
     .format(knn_reg.score(X_train, y_train)))
print('Accuracy of KNN regressor on test set: {:.2f}'
     .format(knn_reg.score(X_test, y_test)))

