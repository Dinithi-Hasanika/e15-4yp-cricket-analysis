# -*- coding: utf-8 -*-
"""CO421-batScore_comparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E-Z7Jr4PUzlxpzFLM6gPg4g_93Dv6WgC
"""

from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

wb = gc.open_by_url('https://docs.google.com/spreadsheets/d/1peLpNFoEu8NHtVPttJXz4-aScixYu5dh_-6gYPOi9rQ/edit#gid=670066504')

sheet = wb.worksheet('bt_data')

data = sheet.get_all_values()

df = pd.DataFrame(data)
df.columns = df.iloc[0]
df = df.iloc[1:]

df.head()

print(df.info())

df["Man of the match"]= df["Man of the match"].astype(float)
df["Height (cm)"]= df["Height (cm)"].astype(float)
df["NO"]= df["NO"].astype(float)
df["HS"]= df["HS"].astype(float)
df["HS_NO"]= df["HS_NO"].astype(float)
df["SR"]= df["SR"].astype(float)
df["0"]= df["0"].astype(float)
df["Batsmen Score"]= df["Batsmen Score"].astype(float)

df["Batting Style"]= df["Batting Style"].astype('category')
df["Batting Style"]= df["Batting Style"].cat.codes

print(df.info())

df.head()

feature_names =["Man of the match","Height (cm)","Batting Style","NO","HS","HS_NO","SR","0"]
X = df[feature_names]
Y = df['Batsmen Score']

#split the data set as training set and test set randomly
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=0)

#apply scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from matplotlib import pyplot

"""**Linear Regression Feature Importance**"""

from sklearn.linear_model import LinearRegression
model_reg = LinearRegression()
model_reg.fit(X_train, y_train)

importance = model_reg.coef_
for i,v in enumerate(importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))

pyplot.bar([x for x in range(len(importance))], importance)
pyplot.xticks(np.arange(len(feature_names)), feature_names,rotation='vertical')
pyplot.show()

print('Accuracy of Linear regression classifier on training set: {:.2f}'
     .format(model_reg.score(X_train, y_train)))
print('Accuracy of Linear regression classifier on test set: {:.2f}'
     .format(model_reg.score(X_test, y_test)))

"""**CART Regression Feature Importance**"""

from sklearn.tree import DecisionTreeRegressor
model_dt = DecisionTreeRegressor()
model_dt.fit(X_train, y_train)

importance_dt = model_dt.feature_importances_
# summarize feature importance
for i,v in enumerate(importance_dt):
	print('Feature: %0d, Score: %.5f' % (i,v))
# plot feature importance
pyplot.bar([x for x in range(len(importance_dt))], importance_dt)
pyplot.xticks(np.arange(len(feature_names)), feature_names,rotation='vertical')
pyplot.show()

print('Accuracy of DecisionTree Regressor on training set: {:.2f}'
     .format(model_dt.score(X_train, y_train)))
print('Accuracy of DecisionTree Regressor on test set: {:.2f}'
     .format(model_dt.score(X_test, y_test)))

"""**Random Forest Regression Feature Importance**"""

from sklearn.ensemble import RandomForestRegressor
modelrf = RandomForestRegressor()
modelrf.fit(X_train, y_train)

importance2 = modelrf.feature_importances_

for i,v in enumerate(importance2):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))

pyplot.bar([x for x in range(len(importance2))], importance2)
pyplot.xticks(np.arange(len(feature_names)), feature_names,rotation='vertical')
pyplot.show()

print('Accuracy of Random forest classifier on training set: {:.2f}'
     .format(modelrf.score(X_train, y_train)))
print('Accuracy of Random forest classifier on test set: {:.2f}'
     .format(modelrf.score(X_test, y_test)))

"""**Xgboost Feature Importance**"""

from xgboost import XGBRegressor
xgb_reg = XGBRegressor()
xgb_reg.fit(X_train, y_train)

xgb_importance = xgb_reg.feature_importances_
for i,v in enumerate(xgb_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))

# plot feature importance
pyplot.bar([x for x in range(len(xgb_importance))], xgb_importance)
pyplot.show()

print('Accuracy of Xgboost regressor on training set: {:.2f}'
     .format(xgb_reg.score(X_train, y_train)))
print('Accuracy of Xgboost regressor on test set: {:.2f}'
     .format(xgb_reg.score(X_test, y_test)))

from sklearn.neighbors import KNeighborsRegressor
from sklearn.inspection import permutation_importance

knn_reg = KNeighborsRegressor()
knn_reg.fit(X_train, y_train)

# perform permutation importance
resultsk = permutation_importance(knn_reg, X_train, y_train, scoring='neg_mean_squared_error')


perm_importance = resultsk.importances_mean
for i,v in enumerate(perm_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))

# plot feature importance
pyplot.bar([x for x in range(len(perm_importance))], perm_importance)
pyplot.show()

print('Accuracy of knn regressor on training set: {:.2f}'
     .format(knn_reg.score(X_train, y_train)))
print('Accuracy of knn regressor on test set: {:.2f}'
     .format(knn_reg.score(X_test, y_test)))

