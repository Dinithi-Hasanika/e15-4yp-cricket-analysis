# -*- coding: utf-8 -*-
"""BatsmenScore_allFeatureruns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjrNWRskn3J1bNbwnDHP8QdWGJpPkuyL
"""

from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

wb = gc.open_by_url('https://docs.google.com/spreadsheets/d/1peLpNFoEu8NHtVPttJXz4-aScixYu5dh_-6gYPOi9rQ/edit#gid=781939969')

sheet = wb.worksheet('bt_data')

data = sheet.get_all_values()

df = pd.DataFrame(data)
df.columns = df.iloc[0]
df = df.iloc[1:]

df.head()

df.dtypes

df["Mat"]= df["Mat"].astype(float)
df["Inns"]= df["Inns"].astype(float)
df["NO"]= df["NO"].astype(float)
df["HS_NO"]= df["HS_NO"].astype(float)
df["Ave"]= df["Ave"].astype(float)
df["BF"]= df["BF"].astype(float)
df["SR"]= df["SR"].astype(float)
df["100"]= df["100"].astype(float)
df["50"]= df["50"].astype(float)
df["0"]= df["0"].astype(float)
df["Last 4 match runs mean"]= df["Last 4 match runs mean"].astype(float)
df["Man of the match"]= df["Man of the match"].astype(float)
df["Runs"]= df["Runs"].astype(float)
df["HS"]= df["HS"].astype(float)
df["Height (cm)"]= df["Height (cm)"].astype(float)
df["Batsmen Score"]= df["Batsmen Score"].astype(float)
df["Mat_Won_Ave"]= df["Mat_Won_Ave"].astype(float)

df.dtypes

from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()
df['Batting Style'] = label.fit_transform(df['Batting Style'])

df.head()

feature_names = ["Man of the match", "Last 4 match runs mean", "Height (cm)", "Batting Style", "Ave", "NO", "HS", "HS_NO", "SR", "100", "50", "0","Mat","Inns"]
X = df[feature_names]
Y = df["Runs"]

#split the data set as training set and test set randomly
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=0)

#apply scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""**Linear Regression Feature importance**"""

from sklearn.linear_model import LinearRegression
from matplotlib import pyplot

linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)

lin_importance = linear_reg.coef_
for i,v in enumerate(lin_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(lin_importance))], lin_importance)
pyplot.show()

print('Accuracy of Linear regressor on training set: {:.2f}'
     .format(linear_reg.score(X_train, y_train)))
print('Accuracy of Linear regressor on test set: {:.2f}'
     .format(linear_reg.score(X_test, y_test)))

"""**CART Regression Feature Importance**"""

from sklearn.tree import DecisionTreeRegressor

d_reg = DecisionTreeRegressor()
d_reg.fit(X_train, y_train)

d_importance = d_reg.feature_importances_
for i,v in enumerate(d_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(d_importance))], d_importance)
pyplot.show()

print('Accuracy of Decision Tree regressor on training set: {:.2f}'
     .format(d_reg.score(X_train, y_train)))
print('Accuracy of Decision Tree regressor on test set: {:.2f}'
     .format(d_reg.score(X_test, y_test)))

"""**Random Forest Regression Feature Importance**"""

from sklearn.ensemble import RandomForestRegressor

rf_reg = RandomForestRegressor()
rf_reg.fit(X_train, y_train)

rf_importance = rf_reg.feature_importances_
for i,v in enumerate(rf_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(rf_importance))], rf_importance)
pyplot.show()

print('Accuracy of Random Forest regressor on training set: {:.2f}'
     .format(rf_reg.score(X_train, y_train)))
print('Accuracy of Random Forest regressor on test set: {:.2f}'
     .format(rf_reg.score(X_test, y_test)))

"""**XGBoost Regression Feature Importance**"""

from xgboost import XGBRegressor

xgb_reg = XGBRegressor()
xgb_reg.fit(X_train, y_train)

xgb_importance = xgb_reg.feature_importances_
for i,v in enumerate(xgb_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(xgb_importance))], xgb_importance)
pyplot.show()

print('Accuracy of Xgboost regressor on training set: {:.2f}'
     .format(xgb_reg.score(X_train, y_train)))
print('Accuracy of Xgboost regressor on test set: {:.2f}'
     .format(xgb_reg.score(X_test, y_test)))

"""**Permutation Feature Importance for Regression**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.inspection import permutation_importance

knn_reg = KNeighborsRegressor()
knn_reg.fit(X_train, y_train)

results = permutation_importance(knn_reg, X_train, y_train, scoring='neg_mean_squared_error')
knn_importance = results.importances_mean

for i,v in enumerate(knn_importance):
	print('Feature:%0d -> %s, Score: %.5f' % (i,feature_names[i],v))
 
# plot feature importance
pyplot.bar([x for x in range(len(knn_importance))], knn_importance)
pyplot.show()

print('Accuracy of KNN regressor on training set: {:.2f}'
     .format(knn_reg.score(X_train, y_train)))
print('Accuracy of KNN regressor on test set: {:.2f}'
     .format(knn_reg.score(X_test, y_test)))

Test_names = ['Linear regression', 'Randomforest', 'CART', 'Xgboost',
              'k-neighbors']
name_code = ['LR', 'RF', 'CART', 'xG', 'k-N']

training = []
test = []

training.append(linear_reg.score(X_train, y_train))
training.append(rf_reg.score(X_train, y_train)) 
training.append(d_reg.score(X_train, y_train))
training.append(xgb_reg.score(X_train, y_train))
training.append(knn_reg.score(X_train, y_train))

test.append(linear_reg.score(X_test, y_test))
test.append(rf_reg.score(X_test, y_test)) 
test.append(d_reg.score(X_test, y_test))
test.append(xgb_reg.score(X_test, y_test))
test.append(knn_reg.score(X_test, y_test))

plt.scatter(name_code,training,label='training')
plt.scatter(name_code,test,label='test')
plt.xlabel('Name of the test')
plt.ylabel('Accuracy for each test')
plt.legend()
plt.show()

#Permutation shows a better accuracy compared to others 
#Others are overfitted
#therefore permutation feature importance is selected for below predictions

A = np.ones([len(feature_names),len(feature_names)])
for j,p in enumerate(knn_importance):
  for i,v in enumerate(knn_importance):
    A[j,i] = float("{:.3f}".format(p/v))
    print('Importance of %s over %s is  Score: %.3f' % (feature_names[j],feature_names[i],p/v))

ar = np.array(A)
print(ar)

priority = []
for row in A:
 v = 1
 for i in row:
   v = v * i
 v = v ** (1/len(feature_names))
 priority.append(v)

#Priority
for i in range(len(feature_names)):
  print(feature_names[i],priority[i])

pr = np.array(priority)
p = sum(pr)
print(p)

weights = []
for i in priority:
  value = float("{:.4f}".format(i/p))
  weights.append(value)

for i in range(len(feature_names)):
  print(feature_names[i],weights[i])

thisdict = {}
for i in range(len(feature_names)):
  thisdict[feature_names[i]] = weights[i]
print(thisdict)

df['Batsmen_score_allFeatureRuns'] = df['Man of the match']*thisdict['Man of the match']+df['Last 4 match runs mean']*thisdict['Last 4 match runs mean']+df['Height (cm)']*thisdict['Height (cm)']+df['Batting Style']*thisdict['Batting Style']+df['Ave']*thisdict['Ave']+df['NO']*thisdict['NO']+df['HS']*thisdict['HS']+df['HS_NO']*thisdict['HS_NO']+df['SR']*thisdict['SR']+df['100']*thisdict['100']+df['50']*thisdict['50']+df['Mat']*thisdict['Mat']+df['Inns']*thisdict['Inns']-df['0']*thisdict['0']

df.head()

df_new = df[['player', 'Batsmen_score_allFeatureRuns']]

df_new.head(20)

from google.colab import files
df_new.to_csv('allFeatureRuns_batsman_score.csv' , index=False)
files.download('allFeatureRuns_batsman_score.csv')

